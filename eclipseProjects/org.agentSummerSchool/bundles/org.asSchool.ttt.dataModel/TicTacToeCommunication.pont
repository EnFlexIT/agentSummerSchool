; Mon Jun 13 01:04:47 CEST 2022
; 
;+ (version "3.3.1")
;+ (build "Build 430")


(defclass %3ACLIPS_TOP_LEVEL_SLOT_CLASS "Fake class to save top-level slot information"
	(is-a USER)
	(role abstract)
	(single-slot xMarkPlayer
		(type INSTANCE)
;+		(allowed-classes AbstracttPlayer)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot column2
		(type INSTANCE)
;+		(allowed-classes AbstractMarkType)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot gameMoveHistory
		(type INSTANCE)
;+		(allowed-classes GameMove)
		(create-accessor read-write))
	(single-slot gameColumn
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameField
		(type INSTANCE)
;+		(allowed-classes Game)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot column3
		(type INSTANCE)
;+		(allowed-classes AbstractMarkType)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameRow
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot markType
		(type INSTANCE)
;+		(allowed-classes AbstractMarkType)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameRound
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameRow3
		(type INSTANCE)
;+		(allowed-classes GameRow)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameID
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot loser
		(type INSTANCE)
;+		(allowed-classes AbstracttPlayer)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameBoard
		(type INSTANCE)
;+		(allowed-classes GameBoard)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameRow1
		(type INSTANCE)
;+		(allowed-classes GameRow)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot score
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot oMarkPlayer
		(type INSTANCE)
;+		(allowed-classes AbstracttPlayer)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot agentPlayer
		(type INSTANCE)
;+		(allowed-classes AgentPlayer)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameRow2
		(type INSTANCE)
;+		(allowed-classes GameRow)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameResult
		(type INSTANCE)
;+		(allowed-classes GameResult)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot winner
		(type INSTANCE)
;+		(allowed-classes AbstracttPlayer)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot aid
		(type INSTANCE)
;+		(allowed-classes AID)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot column1
		(type INSTANCE)
;+		(allowed-classes AbstractMarkType)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass GameFieldInteraction
	(is-a AgentAction)
	(role abstract)
	(single-slot gameField
		(type INSTANCE)
;+		(allowed-classes Game)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass GetGameField
	(is-a GameFieldInteraction)
	(role concrete))

(defclass PutGameField
	(is-a GameFieldInteraction)
	(role concrete))

(defclass RegisterInteraction
	(is-a AgentAction)
	(role abstract)
	(single-slot agentPlayer
		(type INSTANCE)
;+		(allowed-classes AgentPlayer)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Register
	(is-a RegisterInteraction)
	(role concrete))

(defclass RegisterAnswer
	(is-a RegisterInteraction)
	(role concrete))

(defclass GameResultInteraction
	(is-a AgentAction)
	(role concrete)
	(single-slot gameResult
		(type INSTANCE)
;+		(allowed-classes GameResult)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass AbstractGameConcepts
	(is-a Concept)
	(role abstract)
	(single-slot gameID
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Game
	(is-a AbstractGameConcepts)
	(role concrete)
	(single-slot gameBoard
		(type INSTANCE)
;+		(allowed-classes GameBoard)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot xMarkPlayer
		(type INSTANCE)
;+		(allowed-classes AbstracttPlayer)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot gameMoveHistory
		(type INSTANCE)
;+		(allowed-classes GameMove)
		(create-accessor read-write))
	(single-slot oMarkPlayer
		(type INSTANCE)
;+		(allowed-classes AbstracttPlayer)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass GameResult
	(is-a AbstractGameConcepts)
	(role concrete)
	(single-slot winner
		(type INSTANCE)
;+		(allowed-classes AbstracttPlayer)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot loser
		(type INSTANCE)
;+		(allowed-classes AbstracttPlayer)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass AbstractMarkType
	(is-a Concept)
	(role abstract))

(defclass Cross
	(is-a AbstractMarkType)
	(role concrete))

(defclass Circle
	(is-a AbstractMarkType)
	(role concrete))

(defclass GameBoard
	(is-a Concept)
	(role concrete)
	(single-slot gameRow2
		(type INSTANCE)
;+		(allowed-classes GameRow)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameRow1
		(type INSTANCE)
;+		(allowed-classes GameRow)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameRow3
		(type INSTANCE)
;+		(allowed-classes GameRow)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass GameRow
	(is-a Concept)
	(role concrete)
	(single-slot column2
		(type INSTANCE)
;+		(allowed-classes AbstractMarkType)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot column3
		(type INSTANCE)
;+		(allowed-classes AbstractMarkType)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot column1
		(type INSTANCE)
;+		(allowed-classes AbstractMarkType)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass GameMove
	(is-a Concept)
	(role concrete)
	(single-slot gameRow
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot markType
		(type INSTANCE)
;+		(allowed-classes AbstractMarkType)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot gameColumn
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass AbstracttPlayer
	(is-a Concept)
	(role abstract)
	(single-slot aid
		(type INSTANCE)
;+		(allowed-classes AID)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot score
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass AgentPlayer "Either Cross, Circle or None"
	(is-a AbstracttPlayer)
	(role concrete))

(defclass HumanPlayer
	(is-a AbstracttPlayer)
	(role concrete))